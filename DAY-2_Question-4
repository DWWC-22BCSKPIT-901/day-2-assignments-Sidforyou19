#include <iostream>
#include <vector>
using namespace std;

int maxHappyGroups(int batchSize, vector<int>& groups) {
    vector<int> remainderCount(batchSize, 0);

    for (int group : groups) {
        remainderCount[group % batchSize]++;
    }

    int happyGroups = remainderCount[0];

    for (int i = 1; i < batchSize; ++i) {
        int complement = batchSize - i;
        if (remainderCount[i] > 0) {
            if (i == complement) {
                happyGroups += remainderCount[i] / 2;
                remainderCount[i] %= 2;
            } else {
                int pairs = min(remainderCount[i], remainderCount[complement]);
                happyGroups += pairs;
                remainderCount[i] -= pairs;
                remainderCount[complement] -= pairs;
            }
        }
    }

    int remaining = 0;
    for (int i = 1; i < batchSize; ++i) {
        remaining += remainderCount[i] * i;
    }

    return happyGroups + (remaining / batchSize);
}

int main() {
    vector<int> groups1 = {1, 2, 3, 4, 5, 6};
    cout << "Example 1 Output: " << maxHappyGroups(3, groups1) << endl; 

    vector<int> groups2 = {1, 3, 2, 5, 2, 2, 1, 6};
    cout << "Example 2 Output: " << maxHappyGroups(4, groups2) << endl; 

    return 0;
}
